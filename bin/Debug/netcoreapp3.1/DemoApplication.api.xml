<?xml version="1.0"?>
<doc>
    <assembly>
        <name>DemoApplication.api</name>
    </assembly>
    <members>
        <member name="T:DemoApplication.api.Controllers.AuditsController">
             <summary>
             Accounting Controller used to view accounting data
             </summary>
            
        </member>
        <member name="M:DemoApplication.api.Controllers.AuditsController.#ctor(DemoApplication.framework.IAuditTrailService)">
            <summary>
            Accounting Controller Constructor grants access to the accounting service and the accounting history service
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.AuditsController.GetLastMonth">
            <summary>
            Returns a list of all audit entries in the last month
            </summary>
            <remarks>
            Request all audit trail entries of the last month
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.AuditsController.GetAll">
            <summary>
            Returns a list of all audit entries
            </summary>
            <remarks>
            Request all audit trail entries
            </remarks>
        </member>
        <member name="T:DemoApplication.api.Controllers.AuthsController">
            <summary>
            Authorization Controller used for login
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.AuthsController.#ctor(DemoApplication.framework.IAuthService)">
            <summary>
            Auth Controller Constructor
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.AuthsController.SignInAsync(DemoApplication.models.SignInModel)">
            <summary>
            Sign In
            </summary>
            <param name="model"></param>
            <returns>TokenModel</returns>
            <remarks>
            Sign in to the system to receive your bearer token
            </remarks>
        </member>
        <member name="T:DemoApplication.api.Controllers.DocumentsController">
            <summary>
            File Controller used to upload and download files
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.DocumentsController.#ctor(DemoApplication.framework.IDocumentService)">
            <summary>
            File Controller Constructor
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.DocumentsController.PostFile(DemoApplication.models.FileModel)">
            <summary>
            Upload a new file
            </summary>
            <param name="fileModel"></param>
            <remarks>
            Send a document for saving on the server
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.DocumentsController.RemoveAsync(System.Guid)">
            <summary>
            Delete an uploaded file
            </summary>
            <param name="fileId"></param>
            <remarks>
            Remove a document by supplying the document Id
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.DocumentsController.GetAsync(System.Guid)">
            <summary>
            Get a specified file
            </summary>
            <remarks>
            Send a document based on the document model for saving on the server
            </remarks>
        </member>
        <member name="T:DemoApplication.api.Controllers.EntitlementController">
            <summary>
            Entitlement Controller used for retrieving default entitlement
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.EntitlementController.#ctor(DemoApplication.framework.IEntitlementExceptionsService)">
            <summary>
            Entitlment Exceptions Controller Constructor grants access to the IndustryType service
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.EntitlementController.GetDefaultEntitlement(DemoApplication.models.RolesEnum)">
            <summary>
            Get Default Entitlement for given role
            </summary>
            <param name="role"></param>
            <returns>EntilementExceptionsModel</returns>
            <remarks>
            Get the Default Entitlement for the given role
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.EntitlementController.GetUserEntitlement(System.String)">
            <summary>
            Get Current User Entitlement
            </summary>
            <param name="email"></param>
            <returns>EntitlementExceptionsModel</returns>
            <remarks>
            Get the given user entitlement exceptions
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.EntitlementController.GetUserRole(System.String)">
            <summary>
            Get Current User Role and return it as a value pair string (for dropdown use)
            </summary>
            <param name="email"></param>
            <returns>EntitlementExceptionsModel</returns>
            <remarks>
            Get the given user entitlement exceptions
            </remarks>
        </member>
        <member name="T:DemoApplication.api.Controllers.LookupsController">
            <summary>
            Lookups controller for sharing all enums and possible values
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.LookupsController.#ctor">
            <summary>
            Lookups controller constructor that grants access to the industry type service and the voucher type service
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.LookupsController.Roles">
            <summary>
            Get a list of all roles
            </summary>
            <remarks>
            Request a list of all Roles
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.LookupsController.Entity">
            <summary>
            Get a list of all Enities used for notifications
            </summary>
            <remarks>
            Request a list of all entities used in notifications
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.LookupsController.MakerChecker">
            <summary>
            Get a list of all Actions for Maker Checker
            </summary>
            <remarks>
            Request a list of all Maker Checker actions
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.LookupsController.Severity">
            <summary>
            Get a list of Severity used in notifications
            </summary>
            <remarks>
            Request a list Severity used for Notifications
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.LookupsController.ListOperationTypesAsync">
            <summary>
            List Patch operation types
            </summary>
            <remarks>
            Request a list of the operation types used in the patch api calls
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.LookupsController.GetEnumList``1">
            <summary>
            Creates a KeyValuePair from the given enum
            </summary>
        </member>
        <member name="T:DemoApplication.api.Controllers.MakerCheckersController">
            <summary>
            Maker Checker Controller for Maker Checker interactions
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.MakerCheckersController.#ctor(DemoApplication.framework.IMakerCheckerService,DemoApplication.framework.IUserService,DemoApplication.framework.IEntitlementExceptionsService,DemoApplication.framework.IAuthService)">
            <summary>
            MakerChecker constructor that grants access to the Voucher Service and the Maker Checker Service
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.MakerCheckersController.SuspendUserAsync(DemoApplication.models.NewMakerCheckerModel)">
            <summary>
            Disable / Inactivate a user
            </summary>
            <remarks>
            Request disabling a user by sending the user ID and receiving a result response
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.MakerCheckersController.RegisterAsync(DemoApplication.models.NewMakerCheckerModel)">
            <summary>
            Create a request to create a new User
            </summary>
            <remarks>
            Register a new user
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.MakerCheckersController.ChangePassword(DemoApplication.models.NewMakerCheckerModel)">
            <summary>
            Create a request to Change a users password
            </summary>
            <remarks>
            Change a users password
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.MakerCheckersController.EntitlementAsync(DemoApplication.models.NewMakerCheckerModel)">
            <summary>
            Create a request to Change a users Role/Entitlement
            </summary>
            <remarks>
            Change User entitlement/role
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.MakerCheckersController.GetAsync(System.Guid)">
            <summary>
            Get a specific Maker Checker Entry
            </summary>
            <remarks>
            Request a Maker Checker entry by supplying the GUID
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.MakerCheckersController.GetFilesAsync(System.Guid)">
            <summary>
            Get a specific Maker Checker Entry files
            </summary>
            <remarks>
            Request a Maker Checker entry' files by supplying the GUID
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.MakerCheckersController.ListAsync">
            <summary>
            Get a list of all Maker Checkers
            </summary>
            <remarks>
            Request a list of all Maker Checkers
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.MakerCheckersController.Approve(System.Guid)">
            <summary>
            Approve a Maker Checker Entry
            </summary>
            <remarks>
            Approve a Maker Checker entry and action the original request
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.MakerCheckersController.Deny(System.Guid)">
            <summary>
            Deny a Maker Checker Entry
            </summary>
            <remarks>
            Deny a Maker Checker Entry and take no further action
            </remarks>
        </member>
        <member name="T:DemoApplication.api.Controllers.NotificationsController">
            <summary>
            Notification controller for notification interactions
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.NotificationsController.#ctor(DemoApplication.framework.INotificationService)">
            <summary>
            Notification Constructor provides access to the notification service
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.NotificationsController.ListAsync">
            <summary>
            Get a list of all notifications
            </summary>
            <remarks>
            Request a list of all notifications
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.NotificationsController.ListByRoleAsync">
            <summary>
            Get a list of all notifications by current Role
            </summary>
            <remarks>
            Request a list of all notifications By Role (Role is determined by logged in user)
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.NotificationsController.ListAlertsAsync">
            <summary>
            Get all notifications with Alert status (Serious)
            </summary>
            <remarks>
            Request notifications with a serious/error status
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.NotificationsController.GetAsync(System.Guid)">
            <summary>
            Get a specific notification based on received id
            </summary>
            <remarks>
            Get notification details by supplying the notification ID
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.NotificationsController.ReadNotification(System.Guid)">
            <summary>
            Mark a Notification as read
            </summary>
            <remarks>
            Read a notification by supplying it's ID and the current user email
            </remarks>
        </member>
        <member name="T:DemoApplication.api.Controllers.UsersController">
            <summary>
            User controller for user interactions
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.UsersController.#ctor(DemoApplication.framework.IUserService)">
            <summary>
            User controller constructor
            </summary>
        </member>
        <member name="M:DemoApplication.api.Controllers.UsersController.GetAsync(System.Guid)">
            <summary>
            Retrieve an existing user
            </summary>
            <remarks>
            Request user details by providing the user id and receiving the user model as a response
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.UsersController.GetCurrentAsync">
            <summary>
            Retrieve the currently logged in user
            </summary>
            <remarks>
            Request user details of the currently signd in user, receiving the user model as a response
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.UsersController.ListAsync">
            <summary>
            Get a list of all user
            </summary>
            <remarks>
            Request a list of all saved users
            </remarks>
        </member>
        <member name="M:DemoApplication.api.Controllers.UsersController.UpdateAsync(System.Guid,Microsoft.AspNetCore.JsonPatch.JsonPatchDocument{DemoApplication.models.UserModel})">
            <summary>
            Update user details
            </summary>
            <param name="patchDoc"></param>
            <remarks>
            Request updating a user by providing the new user details and receiving a result
            </remarks>
        </member>
        <member name="T:DemoApplication.api.RemoveVersionParameterFilter">
            <summary>
            Add versioning functionality
            </summary>
        </member>
        <member name="M:DemoApplication.api.RemoveVersionParameterFilter.Apply(Microsoft.OpenApi.Models.OpenApiOperation,Swashbuckle.AspNetCore.SwaggerGen.OperationFilterContext)">
            <summary>
            Add versioning functionality
            </summary>
        </member>
        <member name="T:DemoApplication.api.ReplaceVersionWithExactValueInPathFilter">
            <summary>
            Add current version
            </summary>
        </member>
        <member name="M:DemoApplication.api.ReplaceVersionWithExactValueInPathFilter.Apply(Microsoft.OpenApi.Models.OpenApiDocument,Swashbuckle.AspNetCore.SwaggerGen.DocumentFilterContext)">
            <summary>
            Add current version
            </summary>
        </member>
        <member name="T:DemoApplication.api.Extensions">
            <summary>
            Add functionality to existing features
            </summary>
        </member>
        <member name="M:DemoApplication.api.Extensions.AddContextUseSQL(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Define the current SQL context of the application
            </summary>
        </member>
        <member name="M:DemoApplication.api.Extensions.AddContextUsePostgreSQL(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Define the current PostgreSQL context of the application
            </summary>
        </member>
        <member name="M:DemoApplication.api.Extensions.AddSecurity(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add security token
            </summary>
        </member>
        <member name="M:DemoApplication.api.Extensions.AddServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Add Services to be used by application for dependency injection
            </summary>
        </member>
        <member name="T:DemoApplication.api.Program">
            <summary>
            The main class of the program
            </summary>
        </member>
        <member name="M:DemoApplication.api.Program.Main">
            <summary>
            The starting point of the application
            </summary>
        </member>
        <member name="T:DemoApplication.api.Startup">
            <summary>
            Used for configuration on application start
            </summary>
        </member>
        <member name="M:DemoApplication.api.Startup.Configure(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configure application functionality
            </summary>
        </member>
        <member name="M:DemoApplication.api.Startup.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Configure application Services
            </summary>
        </member>
        <member name="M:DemoApplication.api.Startup.GetJsonPatchInputFormatter">
            <summary>
            JSonPatch Input Formatter
            </summary>
        </member>
    </members>
</doc>
